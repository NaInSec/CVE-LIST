{
    "dataType": "CVE_RECORD",
    "dataVersion": "5.0",
    "cveMetadata": {
        "cveId": "CVE-2022-4450",
        "assignerOrgId": "3a12439a-ef3a-4c79-92e6-6081a721f1e5",
        "state": "PUBLISHED",
        "assignerShortName": "openssl",
        "dateReserved": "2022-12-13T13:38:08.598Z",
        "datePublished": "2023-02-08T19:04:04.874Z",
        "dateUpdated": "2023-02-24T14:53:33.164Z"
    },
    "containers": {
        "cna": {
            "affected": [
                {
                    "defaultStatus": "unaffected",
                    "product": "OpenSSL",
                    "vendor": "OpenSSL",
                    "versions": [
                        {
                            "lessThan": "3.0.8",
                            "status": "affected",
                            "version": "3.0.0",
                            "versionType": "semver"
                        },
                        {
                            "lessThan": "1.1.1t",
                            "status": "affected",
                            "version": "1.1.1",
                            "versionType": "custom"
                        }
                    ]
                }
            ],
            "credits": [
                {
                    "lang": "en",
                    "type": "finder",
                    "user": "00000000-0000-4000-9000-000000000000",
                    "value": "CarpetFuzz"
                },
                {
                    "lang": "en",
                    "type": "reporter",
                    "user": "00000000-0000-4000-9000-000000000000",
                    "value": "Dawei Wang"
                },
                {
                    "lang": "en",
                    "type": "reporter",
                    "user": "00000000-0000-4000-9000-000000000000",
                    "value": "Marc Sch√∂nefeld"
                },
                {
                    "lang": "en",
                    "type": "remediation developer",
                    "user": "00000000-0000-4000-9000-000000000000",
                    "value": "Kurt Roeckx"
                },
                {
                    "lang": "en",
                    "type": "remediation developer",
                    "user": "00000000-0000-4000-9000-000000000000",
                    "value": "Matt Caswell"
                }
            ],
            "datePublic": "2023-02-07T00:00:00.000Z",
            "descriptions": [
                {
                    "lang": "en",
                    "supportingMedia": [
                        {
                            "base64": false,
                            "type": "text/html",
                            "value": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and<br>decodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.<br>If the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are<br>populated with pointers to buffers containing the relevant decoded data. The<br>caller is responsible for freeing those buffers. It is possible to construct a<br>PEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()<br>will return a failure code but will populate the header argument with a pointer<br>to a buffer that has already been freed. If the caller also frees this buffer<br>then a double free will occur. This will most likely lead to a crash. This<br>could be exploited by an attacker who has the ability to supply malicious PEM<br>files for parsing to achieve a denial of service attack.<br><br>The functions PEM_read_bio() and PEM_read() are simple wrappers around<br>PEM_read_bio_ex() and therefore these functions are also directly affected.<br><br>These functions are also called indirectly by a number of other OpenSSL<br>functions including PEM_X509_INFO_read_bio_ex() and<br>SSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal<br>uses of these functions are not vulnerable because the caller does not free the<br>header argument if PEM_read_bio_ex() returns a failure code. These locations<br>include the PEM_read_bio_TYPE() functions as well as the decoders introduced in<br>OpenSSL 3.0.<br><br><div>The OpenSSL asn1parse command line application is also impacted by this issue.</div><br>"
                        }
                    ],
                    "value": "The function PEM_read_bio_ex() reads a PEM file from a BIO and parses and\ndecodes the \"name\" (e.g. \"CERTIFICATE\"), any header data and the payload data.\nIf the function succeeds then the \"name_out\", \"header\" and \"data\" arguments are\npopulated with pointers to buffers containing the relevant decoded data. The\ncaller is responsible for freeing those buffers. It is possible to construct a\nPEM file that results in 0 bytes of payload data. In this case PEM_read_bio_ex()\nwill return a failure code but will populate the header argument with a pointer\nto a buffer that has already been freed. If the caller also frees this buffer\nthen a double free will occur. This will most likely lead to a crash. This\ncould be exploited by an attacker who has the ability to supply malicious PEM\nfiles for parsing to achieve a denial of service attack.\n\nThe functions PEM_read_bio() and PEM_read() are simple wrappers around\nPEM_read_bio_ex() and therefore these functions are also directly affected.\n\nThese functions are also called indirectly by a number of other OpenSSL\nfunctions including PEM_X509_INFO_read_bio_ex() and\nSSL_CTX_use_serverinfo_file() which are also vulnerable. Some OpenSSL internal\nuses of these functions are not vulnerable because the caller does not free the\nheader argument if PEM_read_bio_ex() returns a failure code. These locations\ninclude the PEM_read_bio_TYPE() functions as well as the decoders introduced in\nOpenSSL 3.0.\n\nThe OpenSSL asn1parse command line application is also impacted by this issue.\n\n\n"
                }
            ],
            "metrics": [
                {
                    "format": "other",
                    "other": {
                        "content": {
                            "text": "Moderate"
                        },
                        "type": "https://www.openssl.org/policies/secpolicy.html"
                    }
                }
            ],
            "problemTypes": [
                {
                    "descriptions": [
                        {
                            "description": "double-free",
                            "lang": "en"
                        }
                    ]
                }
            ],
            "providerMetadata": {
                "orgId": "3a12439a-ef3a-4c79-92e6-6081a721f1e5",
                "shortName": "openssl",
                "dateUpdated": "2023-02-24T14:53:33.164Z"
            },
            "references": [
                {
                    "name": "OpenSSL Advisory",
                    "tags": [
                        "vendor-advisory"
                    ],
                    "url": "https://www.openssl.org/news/secadv/20230207.txt"
                },
                {
                    "name": "3.0.8 git commit",
                    "tags": [
                        "patch"
                    ],
                    "url": "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=63bcf189be73a9cc1264059bed6f57974be74a83"
                },
                {
                    "name": "1.1.1t git commit",
                    "tags": [
                        "patch"
                    ],
                    "url": "https://git.openssl.org/gitweb/?p=openssl.git;a=commitdiff;h=bbcf509bd046b34cca19c766bbddc31683d0858b"
                },
                {
                    "url": "https://security.gentoo.org/glsa/202402-08"
                }
            ],
            "source": {
                "discovery": "UNKNOWN"
            },
            "title": "Double free after calling PEM_read_bio_ex",
            "x_generator": {
                "engine": "Vulnogram 0.1.0-dev"
            }
        }
    }
}